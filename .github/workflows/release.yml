name: Release

on:
  pull_request_target:
    types: [closed]

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: subosito/flutter-action@v2
      - name: "Cache - Flutter"
        uses: actions/cache@v3
        env:
          flutter_linux_path: "/opt/hostedtoolcache/flutter"
          flutter_macos_path: "/Users/runner/hostedtoolcache/flutter"
        with:
          path: ${{ env.flutter_linux_path }}
          key: ${{ runner.OS }}-flutter-install-cache-${{ env.flutter_version }}
      - uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.flutter_version }}
          # channel: beta
      - name: Install dependencies
        run: flutter pub get
      - name: Determine version number
        run: |
          git config --global user.name "${GITHUB_ACTOR}"
          git config --global user.email "${GITHUB_ACTOR}@users.noreply.github.com"
          VERSION=$(grep 'version: ' pubspec.yaml | awk '{print $2}')
          if [[ ${{ github.event.pull_request.merged }} == 'true' ]]; then
            PR_TITLE=$(echo ${{ github.event.pull_request.title }} | tr '[:upper:]' '[:lower:]')
            if [[ $PR_TITLE == *'[major]'* ]]; then
              echo "Merging pull request with [major] in title. Bumping major version."
              NEW_VERSION=$(echo $VERSION | awk -F. '{print $1+1".0.0"}')
            elif [[ $PR_TITLE == *'[minor]'* ]]; then
              echo "Merging pull request with [minor] in title. Bumping minor version."
              NEW_VERSION=$(echo $VERSION | awk -F. '{print $1"."$2+1".0"}')
            else
              echo "Merging pull request. Bumping patch version."
              NEW_VERSION=$(echo $VERSION | awk -F. '{print $1"."$2"."$3+1}')
            fi
            sed -i "s/version: $VERSION/version: $NEW_VERSION/" pubspec.yaml
            git add pubspec.yaml
            git commit -m "Bump version to $NEW_VERSION"
          else
            echo "Closing pull request without merging. No version bump required."
          fi
      - name: Update CHANGELOG
        run: |
          if [[ ${{ github.event.pull_request.merged }} == 'true' ]]; then
            github_changelog_generator -t ${{ secrets.GITHUB_TOKEN }}
            git add CHANGELOG.md
            git commit -m "Update CHANGELOG"
          fi
      - name: Create Github release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        if: ${{ github.event.pull_request.merged == 'true' }}
        with:
          tag_name: ${{ env.NEW_VERSION }}
          release_name: Release ${{ env.NEW_VERSION }}
          body: |
            Release ${{ env.NEW_VERSION }} of my Dart package.
          draft: false
          prerelease: false
